{"version":3,"sources":["webpack:///./src/templates/state.js"],"names":["order","titleCase","name","charAt","toUpperCase","slice","Table","styled","table","td","pageContext","allScreenshots","screenshots","forEach","screenshot","date","types","type","push","Object","keys","values","sort","a","b","aType","bType","indexOf","state","href","slug","links","twitter","childTacoYaml","map","link","url","search","target","time","splice","length","className","replace","isManual"],"mappings":"wkBAIA,IAAMA,EAAQ,CAAC,UAAW,YAAa,WAAY,aAAc,WAE3DC,EAAY,SAACC,GAAD,OAAUA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,IAEhEC,EAAQC,IAAOC,MAAV,KAoBED,IAAOE,GAAV,KAIK,sBAAsB,IAAnBC,EAAkB,EAAlBA,YACVC,EAAiB,GA6BvB,OA5BAD,EAAYE,YAAYC,SAAQ,SAACC,QACgB,IAApCH,EAAeG,EAAWC,QACnCJ,EAAeG,EAAWC,MAAQ,CAChCA,KAAMD,EAAWC,KACjBC,MAAO,UAKT,IADOL,EAAeG,EAAWC,MAAMC,MAAMF,EAAWG,QAGxDN,EAAeG,EAAWC,MAAMC,MAAMF,EAAWG,MAAQ,IAE3DN,EAAeG,EAAWC,MAAMC,MAAMF,EAAWG,MAAMC,KAAKJ,MAE9DK,OAAOC,KAAKT,GAAgBE,SAAQ,SAACE,GACnCJ,EAAeI,GAAMC,MAAQG,OAAOE,OAAOV,EAAeI,GAAMC,OAAOM,MACrE,SAACC,EAAGC,GACF,IAAMC,EAAQF,EAAE,GAAGN,KACbS,EAAQF,EAAE,GAAGP,KACnB,OAA8B,IAA1BjB,EAAM2B,QAAQF,GACT,EAEFzB,EAAM2B,QAAQF,GAASzB,EAAM2B,QAAQD,IAAU,EAAI,QAM9D,kBAAC,IAAD,KACE,4BAAKhB,EAAYkB,MAAM1B,MACvB,2BACE,uBACE2B,KAAI,wCAA0CnB,EAAYkB,MAAME,MADlE,2BAMDpB,EAAYqB,OACX,4BACGrB,EAAYkB,MAAMI,SACjB,4BACE,uBAAGH,KAAI,uBAAyBnB,EAAYkB,MAAMI,SAAlD,6BAKHtB,EAAYqB,MAAME,cAAcF,MAAMG,KAAI,SAACC,GAAD,OACzC,4BACE,gCACGA,EAAKjC,KAAKC,OAAO,GAAGC,cAAgB+B,EAAKjC,KAAKG,MAAM,GADvD,KAEU,IACT8B,EAAKC,IAAIC,OAAO,QAAU,EACzB,8FAEE,6BACA,8BAAOF,EAAKC,MAGd,oCACE,uBAAGP,KAAMM,EAAKC,IAAKE,OAAO,UACvBH,EAAKC,WAQpB,kBAAC9B,EAAD,KACE,+BACE,4BACE,oCACA,sCACA,6CAGJ,+BACGa,OAAOE,OAAOV,GAAgBuB,KAAI,SAACnB,GAAD,OACjC,oCACE,4BACE,4BACE,gCAASA,EAAKA,OAEhB,4BAAKd,EAAUc,EAAKC,MAAM,GAAG,GAAGC,OAChC,4BACE,4BACGF,EAAKC,MAAM,GAAGkB,KAAI,SAACpB,GAAD,OACjB,4BACE,uBAAGe,KAAMf,EAAWsB,IAAKE,OAAO,UAC7BxB,EAAWyB,aAOvBxB,EAAKC,MAAMwB,OAAO,EAAGzB,EAAKC,MAAMyB,QAAQP,KAAI,SAACjB,GAAD,OAC3C,4BACE,wBAAIyB,UAAU,cACd,4BACGzC,EACCgB,EAAK,GAAGA,KAAK0B,QAAQ,IAAK,KAAKA,QAAQ,UAAW,KAEnD1B,EAAK,GAAG2B,UAAY,kDAEvB,4BACE,4BACG3B,EAAKiB,KAAI,SAACpB,GAAD,OACR,4BACE,uBAAGe,KAAMf,EAAWsB,IAAKE,OAAO,UAC7BxB,EAAWyB","file":"component---src-templates-state-js-35fa03a6047666d3b137.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\nimport Layout from '../components/layout'\n\nconst order = ['primary', 'secondary', 'tertiary', 'quaternary', 'quinary']\n\nconst titleCase = (name) => name.charAt(0).toUpperCase() + name.slice(1)\n\nconst Table = styled.table`\n  width: 100%;\n  td {\n    border-top: 1px solid black;\n    &.no-border {\n      border-top: none;\n    }\n  }\n  ul {\n    list-style-type: none;\n    li {\n      display: inline-block;\n      margin-right: 1rem;\n    }\n    a {\n      color: black;\n    }\n  }\n`\n\nconst Date = styled.td`\n  width: 150px;\n`\n\nexport default ({ pageContext }) => {\n  const allScreenshots = {}\n  pageContext.screenshots.forEach((screenshot) => {\n    if (typeof allScreenshots[screenshot.date] === 'undefined') {\n      allScreenshots[screenshot.date] = {\n        date: screenshot.date,\n        types: {},\n      }\n    }\n    if (\n      typeof allScreenshots[screenshot.date].types[screenshot.type] ===\n      'undefined'\n    ) {\n      allScreenshots[screenshot.date].types[screenshot.type] = []\n    }\n    allScreenshots[screenshot.date].types[screenshot.type].push(screenshot)\n  })\n  Object.keys(allScreenshots).forEach((date) => {\n    allScreenshots[date].types = Object.values(allScreenshots[date].types).sort(\n      (a, b) => {\n        const aType = a[0].type\n        const bType = b[0].type\n        if (order.indexOf(aType) === -1) {\n          return 1\n        }\n        return order.indexOf(aType) < order.indexOf(bType) ? -1 : 1\n      },\n    )\n  })\n\n  return (\n    <Layout>\n      <h2>{pageContext.state.name}</h2>\n      <p>\n        <a\n          href={`https://covidtracking.com/data/state/${pageContext.state.slug}`}\n        >\n          View state information\n        </a>\n      </p>\n      {pageContext.links && (\n        <ul>\n          {pageContext.state.twitter && (\n            <li>\n              <a href={`https://twitter.com/${pageContext.state.twitter}`}>\n                Official Twitter account\n              </a>\n            </li>\n          )}\n          {pageContext.links.childTacoYaml.links.map((link) => (\n            <li>\n              <strong>\n                {link.name.charAt(0).toUpperCase() + link.name.slice(1)}:\n              </strong>{' '}\n              {link.url.search('http') > 0 ? (\n                <>\n                  We dynamically generate the URL, based on this pattern:\n                  <br />\n                  <code>{link.url}</code>\n                </>\n              ) : (\n                <>\n                  <a href={link.url} target=\"_blank\">\n                    {link.url}\n                  </a>\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n      <Table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Source</th>\n            <th>Screenshots</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.values(allScreenshots).map((date) => (\n            <>\n              <tr>\n                <td>\n                  <strong>{date.date}</strong>\n                </td>\n                <td>{titleCase(date.types[0][0].type)}</td>\n                <td>\n                  <ul>\n                    {date.types[0].map((screenshot) => (\n                      <li>\n                        <a href={screenshot.url} target=\"_blank\">\n                          {screenshot.time}\n                        </a>\n                      </li>\n                    ))}\n                  </ul>\n                </td>\n              </tr>\n              {date.types.splice(1, date.types.length).map((type) => (\n                <tr>\n                  <td className=\"no-border\" />\n                  <td>\n                    {titleCase(\n                      type[0].type.replace(':', ' ').replace(' source', ''),\n                    )}\n                    {type[0].isManual && <> (manual)</>}\n                  </td>\n                  <td>\n                    <ul>\n                      {type.map((screenshot) => (\n                        <li>\n                          <a href={screenshot.url} target=\"_blank\">\n                            {screenshot.time}\n                          </a>\n                        </li>\n                      ))}\n                    </ul>\n                  </td>\n                </tr>\n              ))}\n            </>\n          ))}\n        </tbody>\n      </Table>\n    </Layout>\n  )\n}\n"],"sourceRoot":""}